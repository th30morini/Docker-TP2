Compléter le Dockerfile afin de builder correctement l’application contenu dans src/

#Dockerfile

FROM node:12-alpine3.9
WORKDIR /app
COPY ./package.json ./
RUN npm install --production
COPY ./src ./src
CMD ["node", "src/index.js"]

a. Une option de npm vous permet de n’installer que ce qui est nécessaire.
Quelle est cette option ? Quelle bonne pratique Docker permet t-elle de
respecter ?

# L'option est : --production

# Cela réduit le temps de build et la surface d'attaque car moins de packages inutile.



A l’aide de la commande docker build, créer l’image ma_super_app

docker build -t ma_super_app .


[+] Building 19.3s (10/10) FINISHED                                                                   docker:default
 => [internal] load build definition from Dockerfile                                                            0.0s
 => => transferring dockerfile: 178B                                                                            0.0s
 => [internal] load metadata for docker.io/library/node:12-alpine3.9                                            5.1s
 => [internal] load .dockerignore                                                                               0.0s
 => => transferring context: 2B                                                                                 0.0s
 => [1/5] FROM docker.io/library/node:12-alpine3.9@sha256:16d40e6c2858ee41cc7e19bb36f8a92718ad935ceae036e88dcf  2.4s
 => => resolve docker.io/library/node:12-alpine3.9@sha256:16d40e6c2858ee41cc7e19bb36f8a92718ad935ceae036e88dcf  0.0s
 => => sha256:16d40e6c2858ee41cc7e19bb36f8a92718ad935ceae036e88dcffb68041dea6c 1.43kB / 1.43kB                  0.0s
 => => sha256:ed9251aca55330890ef48a274c6ce03052e5438e87b6101b0bab5362ac79b5e5 1.16kB / 1.16kB                  0.0s
 => => sha256:a7d6e4c06dd4f80d3ba52db58f3c7421f6c29497ddf084928103d71b6635314c 6.73kB / 6.73kB                  0.0s
 => => sha256:31603596830fc7e56753139f9c2c6bd3759e48a850659506ebfb885d1cf3aef5 2.77MB / 2.77MB                  0.4s
 => => sha256:f5b0d1ce6f59dcbee12d1ce6f4093fa9a7939c7751f00ff2137b4651dcf2de8f 24.49MB / 24.49MB                1.7s
 => => sha256:55922cf6f31687a003e818aab6c5e42db644b2be19a1c74040d750db3d63354c 2.24MB / 2.24MB                  0.5s
 => => extracting sha256:31603596830fc7e56753139f9c2c6bd3759e48a850659506ebfb885d1cf3aef5                       0.0s
 => => sha256:e8a7c0650cafa577c71ba40f4423d3486d700990904de11327a69bdff61d1a92 283B / 283B                      0.6s
 => => extracting sha256:f5b0d1ce6f59dcbee12d1ce6f4093fa9a7939c7751f00ff2137b4651dcf2de8f                       0.5s
 => => extracting sha256:55922cf6f31687a003e818aab6c5e42db644b2be19a1c74040d750db3d63354c                       0.0s
 => => extracting sha256:e8a7c0650cafa577c71ba40f4423d3486d700990904de11327a69bdff61d1a92                       0.0s
 => [internal] load build context                                                                               0.0s
 => => transferring context: 1.24kB                                                                             0.0s
 => [2/5] WORKDIR /app                                                                                          0.1s
 => [3/5] COPY ./package.json ./                                                                                0.0s
 => [4/5] RUN npm install --production                                                                         11.2s
 => [5/5] COPY ./src ./src                                                                                      0.0s
 => exporting to image                                                                                          0.4s 
 => => exporting layers                                                                                         0.4s 
 => => writing image sha256:d721c5442bb157064c1ce9edc1873e09e0e7317437648c873492821f3e0fc232                    0.0s 
 => => naming to docker.io/library/ma_super_app  


Compléter le fichier docker-compose.yml afin d’éxécuter ma_super_app avec sa
base de données.
/!\ Utiliser correctement les variables d’environnement afin de configurer la
base de données et l’application /!\


version: '3.9'

services:
  node:
    image: ma_super_app
    container_name: node_app
    build:
      context: .
    environment:
      - DATABASE_HOST=mysql
      - DATABASE_PORT=3306
      - DATABASE_USERNAME=myuser
      - DATABASE_PASSWORD=mypassword
      - DATABASE_NAME=mydatabase
    depends_on:
      - mysql
    ports:
      - "3000:3000"
    restart: unless-stopped

  mysql:
    image: mysql:8.0
    container_name: mysql_db
    environment:
      - MYSQL_ROOT_PASSWORD=rootpass
      - MYSQL_DATABASE=mydatabase
      - MYSQL_USER=myuser
      - MYSQL_PASSWORD=mypassword
    command:
      - --default-authentication-plugin=mysql_native_password # nécessaire pour éviter l'erreur ER_NOT_SUPPORTED_AUT>
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    restart: unless-stopped

volumes:
  mysql_data:
  
  
  
  #Puis on lance la commande:  
  $ docker compose up --build -d
  
  # Avec le navigateur on se rend sur http://localhost:3000/
  on voit apparaitre : 'SELECT SUM(1+1) as sum' => 2
